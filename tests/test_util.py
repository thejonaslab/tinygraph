import tinygraph as tg
from tinygraph.util import graph_equality, permute, subgraph, merge
import numpy as np
import pytest
import graph_test_suite
import io

suite = graph_test_suite.get_full_suite()

### Permute ###

def test_permute():
    """
    Test permuting a graph to be equal to another, or permuting back and forth
    to stay equal to itself.
    """
    g1 = tg.TinyGraph(5, np.int32,
                      vp_types = {'color' : np.int32},
                      ep_types = {'color2' : np.int32})
    g2 = tg.TinyGraph(5, np.int32,
                      vp_types = {'color' : np.int32},
                      ep_types = {'color2' : np.int32})
    g1[0,1] = 5
    g2[3,4] = 5
    g1[2,3] = 1
    g2[1,2] = 1
    g1.v['color'][0] = 10
    g2.v['color'][4] = 10
    g1.e['color2'][2,3] = 4
    g2.e['color2'][2,1] = 4

    pG11 = permute(g1,   [3,4,1,2,0])
    pG12 = permute(g1,   [4,3,1,2,0])
    pG13 = permute(pG11, [4,2,3,0,1])

    assert not graph_equality(g2, pG11)
    assert graph_equality(g2, pG12)
    assert graph_equality(g1, pG13)

def test_permute_path():
    """Another case to ensure permutations work in the expected direction"""
    g = tg.TinyGraph(4, np.bool, vp_types={'name': np.dtype('<U20')})
    perm = [2, 3, 1, 0]
    inv_perm = np.argsort(perm) # [3, 2, 0, 1]
    assert np.array_equal(inv_perm, [3, 2, 0 ,1])
    g.v['name'][:] = ['a', 'b', 'c', 'd']
    g[0, 1] = 1
    g[1, 2] = 1
    g[2, 3] = 1

    h  = permute(g, perm)
    assert list(h.v['name']) == ['d', 'c', 'a', 'b']
    gp = permute(h, inv_perm)
    assert graph_equality(g, gp)

def test_permute_identity():
    """Ensure that the identity permutation preserves graph equality"""
    g1 = tg.TinyGraph(5, np.int32,
                      vp_types = {'color' : np.int32},
                      ep_types = {'color2' : np.int32})
    g1[0, 1] = 5
    g1[1, 3] = 3
    g1[2, 3] = 1
    g1[0, 4] = 2
    g1.v['color'][0] = 10
    g1.e['color2'][2,3] = 4

    g2 = permute(g1, [0, 1, 2, 3, 4])

    assert graph_equality(g1, g2)

def test_permute_error_handling():
    """Demonstrate behavior in case not handed a proper permutation"""
    g1 = tg.TinyGraph(5, np.int32,
                      vp_types = {'color' : np.int32},
                      ep_types = {'color2' : np.int32})
    g1[0, 1] = 5
    g1[1, 3] = 3
    g1[2, 3] = 1
    g1[0, 4] = 2
    g1.v['color'][0] = 10
    g1.e['color2'][2,3] = 4


    bad_perm_1 = [0]
    bad_perm_2 = [1, 3, 3, 4, 4]
    bad_perm_3 = [1, 3, 3, 4, 4, 2, 2, 1]
    bad_perm_4 = [-5, 0, 3, 3, 4, 6]


    # Is this behavior we want?
    with pytest.raises(IndexError):
        bg1 = permute(g1, bad_perm_1)

    with pytest.raises(IndexError):
        bg2 = permute(g1, bad_perm_2)

    with pytest.raises(IndexError):
        bg3 = permute(g1, bad_perm_3)

    with pytest.raises(IndexError):
        bg4 = permute(g1, bad_perm_4)

def test_permute_dict():
    """Pass the permutation as a dictionary and ensure the permutation
    operates in the desired direction"""
    perm = [2, 3, 1, 0]
    # perm_dict = dict(zip(range(4), perm))
    # purposely written out of order
    perm_dict = {3:0, 0:2, 2:1, 1:3}
    g = tg.TinyGraph(4, np.bool,
                     vp_types = {'name' : np.dtype('<U20')})
    g.v['name'][:] = ['a', 'b', 'c', 'd']

    h = permute(g, perm_dict)

    assert list(h.v['name']) == ['d', 'c', 'a', 'b']

@pytest.mark.parametrize("test_name", [k for k in suite.keys()])
def test_permutation_inversion_suite(test_name):
    """Use the graph suite to permute and un-permute a graph"""
    rng = np.random.RandomState(0)

    for g in suite[test_name]:
        # Get order and a random permutation
        N = g.vert_N
        perm     = rng.permutation(N)
        inv_perm = np.argsort(perm)

        # Permute the permutation
        # m e t a
        order = rng.permutation(N)
        inv_perm_dict = dict(zip(np.arange(N)[order], inv_perm[order]))

        # Use the list version
        h = permute(g, perm)
        g2 = permute(h, inv_perm)
        assert graph_equality(g, g2)

        # Use the dict version
        g3 = permute(h, inv_perm_dict)
        assert graph_equality(g, g3)

#### Subgraph test cases ###

def test_subgraph_complete():
    """Limiting case of a full graph"""
    g = graph_test_suite.gen_random(5, np.bool, [True], 0.5)
    sg = subgraph(g, range(5))

    assert graph_equality(g, sg)

def test_subgraph_empty():
    """Limiting case of an empty graph"""
    g = graph_test_suite.gen_random(5, np.bool, [True], 0.5)
    sg = subgraph(g, [])

    assert sg.vert_N == 0
    assert not graph_equality(g, sg)

def test_subgraph_list():
    """Check functionality for a list of vertices"""
    rng = np.random.RandomState(0)
    vertices = rng.choice(5, 3, replace=False)

    g = graph_test_suite.gen_random(5, np.bool, [True], 0.5)
    g.add_vert_prop('name', np.dtype('<U20'))
    g.v['name'][:] = ['a', 'b', 'c', 'd', 'e']

    sg = subgraph(g, vertices)

    assert sg.vert_N == 3
    assert np.array_equal(sg.v['name'], np.array(g.v['name'])[vertices])

    for n1, n2 in sg.edges():
        assert sg[n1, n2] == g[vertices[n1], vertices[n2]]

def test_subgraph_set():
    """Check functionality for a set of vertices (as in vertex subset)"""
    rng = np.random.RandomState(0)
    vertices = set(rng.choice(5, 3, replace=False))

    g = graph_test_suite.gen_random(5, np.bool, [True], 0.5)
    g.add_vert_prop('name', np.dtype('<U20'))
    g.v['name'][:] = ['a', 'b', 'c', 'd', 'e']

    sg = subgraph(g, vertices)

    vert_list = sorted(list(vertices))
    assert np.array_equal(sg.v['name'], np.array(g.v['name'])[vert_list])

def test_subgraph_error():
    """Check error-handling for out-of-bounds stuff"""
    vertices = set([0, 1, 12])
    g = tg.TinyGraph(5)
    with pytest.raises(IndexError):
        sg = subgraph(g, vertices)

    vertices2 = set([-1, 0, 3, 4])
    with pytest.raises(IndexError):
        sg2 = subgraph(g, vertices2)

def test_subgraph_duplicate():
    """Check that we can duplicate vertices if we like"""
    vertices = [0, 0, 1]
    g = tg.TinyGraph(2, vp_types={'name':np.dtype('<U10')})
    g.v['name'][:] = ['a', 'b']
    g[0, 1] = 1

    sg = subgraph(g, vertices)

    adj = np.zeros((3, 3), dtype=np.int32)
    adj[0, 2] = 1
    adj[2, 0] = 1
    adj[1, 2] = 1
    adj[2, 1] = 1
    assert sg.vert_N == 3
    assert np.array_equal(adj, sg.adjacency)
    assert np.array_equal(['a', 'a', 'b'], sg.v['name'])

@pytest.mark.parametrize("test_name", [k for k in suite.keys()])
def test_subgraph_suite(test_name):
    """Use the test suite to grab subgraphs"""
    rng = np.random.RandomState(0)

    for g in suite[test_name]:
        # Get order and a random permutation
        N = g.vert_N
        SN = rng.randint(N)
        print(SN)
        vert_list = rng.choice(N, SN, replace=False)
        vertices = sorted(vert_list)

        h = subgraph(g, vertices)

        # Check global properties
        assert h.props == g.props

        # Check vertex properties
        for n, _ in h.vertices():
            for k in g.v.keys():
                assert h.v[k][n] == g.v[k][vertices[n]]

        # Check edge properties and weights
        for n1, n2 in h.edges():
            assert h[n1, n2] == g[vertices[n1], vertices[n2]]
            for k in g.e.keys():
                assert h.e[k][n1, n2] == g.e[k][vertices[n1], vertices[n2]]

        # Check behavior with vertices
        g.add_vert_prop('old_vertex_id', np.int)
        g.v['old_vertex_id'][:] = np.arange(N)

        # Unclear what ordering will result from iterating over vertset
        # so just check that we can reconstruct the original
        vertset = rng.permutation(vert_list)
        h_set = subgraph(g, vertset)

        # Attempt to reconstruct the subgraph `h` made with `vertices`.
        # Note that h_set.v['old_vertex_id'] has indices that lie outside
        # the normal range. So, we perform an argsort and a reverse argsort
        # which brings all the indices in range and preserves the order.
        order = np.argsort(np.argsort(h_set.v['old_vertex_id']))
        h_rec = permute(h_set, order)
        h_rec.remove_vert_prop('old_vertex_id')
        g.remove_vert_prop('old_vertex_id')

        assert graph_equality(h, h_rec)


def test_merge_simple():
    """Merge two graphs, each with two vertices and no properties"""
    g1 = tg.TinyGraph(2)
    g1[0, 1] = 2
    g2 = tg.TinyGraph(2)
    g2[0, 1] = 3

    gg = merge(g1, g2)

    result = np.zeros((4, 4), dtype=np.int32)
    result[0, 1] = 2
    result[1, 0] = 2
    result[2, 3] = 3
    result[3, 2] = 3

    assert gg.vert_N == 4
    assert np.array_equal(gg.adjacency, result)

def test_merge_empty():
    """Merge two empty graphs"""
    g1 = tg.TinyGraph(0, np.bool)
    g2 = tg.TinyGraph(0, np.bool)

    gg  = merge(g1, g2)
    gg2 = merge(g2, g1)

    assert 0 == gg.vert_N
    assert 0 == gg2.vert_N

def test_merge_identity():
    """Merge with an empty graph"""
    g1 = graph_test_suite.gen_random(5, np.bool, [True], 0.5)
    g2 = tg.TinyGraph(0, np.bool)

    gg = merge(g1, g2)
    gh = merge(g2, g1)

    assert graph_equality(g1, gg)
    assert graph_equality(g1, gh)

def test_merge_prop_types():
    """
    Check for desired behavior in case of mismatched property types
    (both for global types and vertex/edge proprty types)
    """
    g1 = tg.TinyGraph(2, np.int32, vp_types={'name':np.dtype('<U10')}, ep_types={'length':np.double})
    g1.v['name'][:] = ['aaa', 'baa']
    g1.props['name'] = 'base'
    g1[0, 1] = 1
    g1.e['length'][0, 1] = 2.2

    g2 = tg.TinyGraph(2, np.double, vp_types={}, ep_types={'length':np.double})
    with pytest.raises(TypeError):
        merge(g1, g2)

    g3 = tg.TinyGraph(2, np.int32, vp_types={}, ep_types={'length':np.int})
    g3.props['name'] = 'secondary'
    g3[0, 1] = 2
    g3.e['length'][0, 1] = 4
    with pytest.raises(TypeError):
        merge(g1, g3)

    g4 = tg.TinyGraph(2, np.int32, vp_types={}, ep_types={'length':np.double})
    g4.props['name'] = 'secondary'
    g4[0, 1] = 2
    g4.e['length'][0, 1] = 4.0
    with pytest.warns(UserWarning):
        gg = merge(g1, g4)
        assert np.array_equal(gg.v['name'], ['aaa', 'baa', '', ''])

    g5 = tg.TinyGraph(2, np.int32, vp_types={'name':np.dtype('<U10')}, ep_types={'length':np.double})
    g5.props['name'] = 'secondary'
    g5.v['name'][:] = ['hello', 'world']
    g5[0, 1] = 2
    g5.e['length'][0, 1] = 4.0

    gh = merge(g1, g5)
    assert gh.props['name'] == 'base'
    assert np.array_equal(gh.v['name'], ['aaa', 'baa', 'hello', 'world'])
    assert gh.e['length'][0, 1] == g1.e['length'][0, 1]
    assert gh.e['length'][2, 3] == g5.e['length'][0, 1]

@pytest.mark.parametrize("test_name", [k for k in suite.keys()])
def test_merge_suite(test_name):
    """Use the test suite to grab merges"""
    for i in range(len(suite[test_name])-1):
        g1 = suite[test_name][i]
        g2 = suite[test_name][i+1]

        gg = merge(g1, g2)

        # Preliminary
        assert gg.vert_N == g1.vert_N + g2.vert_N

        # Just check for transfer of global property names
        for key in g1.props.keys():
            assert key in gg.props.keys()
        for key in g2.props.keys():
            assert key in gg.props.keys()

        # Check vertex properties in bulk
        for key in g1.v.keys():
            assert key in gg.v.keys()
            assert np.array_equal(gg.v[key][:g1.vert_N], g1.v[key])
        for key in g2.v.keys():
            assert key in gg.v.keys()
            assert np.array_equal(gg.v[key][g1.vert_N:], g2.v[key])

        # Check edges through the EdgeProxy instead of e_p like in the function
        for key in g1.e.keys():
            assert key in gg.e.keys()
            for n1, n2 in g1.edges():
                assert g1.e[key][n1, n2] == gg.e[key][n1, n2]

        for key in g2.e.keys():
            assert key in gg.e.keys()
            for n1, n2 in g2.edges():
                assert g2.e[key][n1, n2] == gg.e[key][g1.vert_N+n1, g1.vert_N+n2]

        # Adjacency
        assert np.array_equal(g1.adjacency, gg.adjacency[:g1.vert_N, :g1.vert_N])
        assert np.array_equal(g2.adjacency, gg.adjacency[g1.vert_N:, g1.vert_N:])



def test_permute_multi_dtype():
    """
    Can we permute a graph with complex vert dtypes
    """

    g1 = tg.TinyGraph(5, vp_types = {'big' : '4float32'})
    g1 = permute(g1,   [3,4,1,2,0])
        


multi_dim_dtype_graph = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xac\x81\x10\x04f\x00\x00\x00D\n\x00\x00\r\x00\x14\x00adjacency.npy\x01\x00\x10\x00D\n\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0n\x93f\xa2\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\nF\xa6\x9a:\n\xb5\nd\x02.\x060h\xb0\xa7=\x1e\xb5g\xd4\x9eQ{F\xed\x19\xb5g\xd4\x9eQ{F\xed\x19\xb5\x87Z\xf6\x00\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x7f\xc4\xe3KJ\x00\x00\x00\x99\x00\x00\x00\x15\x00\x14\x00vp_shift_observed.npy\x01\x00\x10\x00\x99\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0^\x93d\xa8\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\x9a:\n\xb5\n\xe4\x03.\x06(`D\x07\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x98\x85\xe3\x17\x7f\x00\x00\x00\xe4\x00\x00\x00\x12\x00\x14\x00vp_shift_value.npy\x01\x00\x10\x00\xe4\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0n\x93f\xa2\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\x9a:\n\xb5\n\xe4\x03.\x06\x02@\xa3\x95\xc5i\xeefU\xa7\xd9\xef\x0b\x9d\xda\xf4\xa5\x9c\xbb\xbe\xab:\xdd^{\xcd\x1e\x84\xad\x17\xc79\x80\xf0f\x9940\xd6x[\x02\xc6S\'=\x01\xe3C\x05\x05\x0en\'?8\x00\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00cl:@~\x00\x00\x00\xe4\x00\x00\x00\x18\x00\x14\x00vp_shift_uncertainty.npy\x01\x00\x10\x00\xe4\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0n\x93f\xa2\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\x9a:\n\xb5\n\xe4\x03.\x06\x02\xa0\xfb\xc14\xbb\x1b\xdd2\xf6\x8d\x86G\xed\x928\x03\xedOh\xa5\xda\xefm\xea\xb4\x03\xe1\xb2\xd2\xe3`\xdc\xdd\xd3\x00\xc6\r\xed\x1c\xf6 \xfc4\xf8%\x18\x07])\xb7\xff\xd9\xda\xe9\x00\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00;X(\xe1V\x00\x00\x00\x10\x02\x00\x00\x10\x00\x14\x00vp_shift_nuc.npy\x01\x00\x10\x00\x10\x02\x00\x00\x00\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0n\x13j\xa2\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\x9a:\n\xb5\n\xe4\x03.\x86\x01\x06\x86@l\x0c\xc4\xceT\xe4{\xa0\x99?\x94\xf8\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xf9\xb8)\x86O\x00\x00\x00\x99\x00\x00\x00\x10\x00\x14\x00vp_splitting.npy\x01\x00\x10\x00\x99\x00\x00\x00\x00\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0^Sj\xa8\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\x9a:\n\xb5\n\xe4\x03.\x06(`bbb`b@\x02\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x88\x15SD\x08\x01\x00\x00t\x02\x00\x00\x12\x00\x14\x00vp_coupling_HH.npy\x01\x00\x10\x00t\x02\x00\x00\x00\x00\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0n\x93f\xa2\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\n\xa6\x9a:\n\xb5\n\xe4\x02.\x86Q\xc0\x90\xbbt\x9e\xc39\xf7>\x87\x9ee\xbd\x0em\x82V\x0ev\xd7\xad\xed]\xdb\xce:|c\x9c\xe8\xf0\xae\xba\xdc!\xec\xbd\x83C\x1b\xb7\x1fX\x0c$\xbff\x9b\x99\xbdS\x8a\xa0\xbd\xd8\xf1\xebv \xbd 5\x1f\x17(\xdb_\rZn\xb7\xe1E\xb5\xdd\'\xdeK`\xb3@\xfaf\xf7\xec\xb6\xebK\xd8b7\xfb\xe8\x12\xb0y {@\xfa\xef\x99\x8a\xd8\xfb\x8a\'\xda\xff[mg\xff\xf5\xa2\x95\xbdn\xa9&X\xac\xe3K\x9d\xbd\xef\x83|{\x90} w|v\xb2\xb0\x9fy\x7f1X\r\x88\x9d\x1a\xf5\xd5\x0edf\xf0\xb7\xb5`\xb5 }M\xee\x0c\xf6\xa5\x9f\xee\x81\xed\x05\xd9\xb3\xa0\xe6%\xd8\x0c\x90\xf9 6H-\xc8\x0c\x90\x1b\x97\x88\x8b\xda\x03\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xb0\xd7\xc7\x12R\x00\x00\x00\xf1\x02\x00\x00\x18\x00\x14\x00ep_coupling_observed.npy\x01\x00\x10\x00\xf1\x02\x00\x00\x00\x00\x00\x00R\x00\x00\x00\x00\x00\x00\x00\x9b\xec\x17\xea\x1b\x10\xc9\xc8P\xc6P\xad\x9e\x92Z\x9c\\\xa4n\xa5\xa0^\x93d\xa8\xae\xa3\xa0\x9e\x96_TR\x94\x98\x17\x9f_\x94\x92\n\x12wK\xcc)N\x05\x8a\x17g$\x16\xa4\x02\xf9\x1aF\xa6:\nF\xa6\x9a:\n\xb5\nd\x02.\x06F\\`TfT\x86\x062\x00PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xd2Hs2<\x07\x00\x00D\n\x00\x00\x15\x00\x14\x00ep_coupling_value.npy\x01\x00\x10\x00D\n\x00\x00\x00\x00\x00\x00<\x07\x00\x00\x00\x00\x00\x00\x9d\x96\xfbS\xd4\xe7\x15\xc6a5&\x8a\xb6\x12\x11\xd4&J[#\x86\x80M\xb5\xa4\x04\xd9\xf7\xbc\xdf]\x95\xc4)\x84\xe2@ZD\x03\x89PED\xd8\xf5R\x17c\r\x12\x82\x86\x8bb\xb5\xe9\x12[\xb9\x88:\xe2%\x10\x11\x13\xd8]4\x81\xd8\x11\xc7\xa8hQ\x07\xa1\x13:\x91\xaa\xad\\\x0c&\r\xd6\x0f\x7fB\xbf\xbf\xed\xfep\xce\x99\xe7<\xcf\xe7\xbc\xbbc\xe2\xa3c\x7f\xeb\xed\xb5\xc1+\'hE\xaa\xfd-[PD`Pd\xda/\x82B\x02\x83\xd2\xd6\xda\xd6\xd9R2\xdfXk[\x91\xca\xff\x8bR2\xec\xa9\x8f\xff\xb7\xafL\xc9J}\xfc{\xf6\xdc\xb0\x90\xc0\xb9a\xcf\x87\x04\xbe\x1d\xf8\x7f~\xe3\xbc\x1e\x7f\xbf\xff2D-\xefo4\xef\\\xf9\x84\xdc\xbb\xb0V\xd2\xa7\x9e\x92X\xab[.,]\xa4\xbc>M\x90\xba\x8da2w\xde{\xe6\xb2\xb3"\xb9\xa6\xd3\xee1?o\xd3e\xde\x17%\xce;O\xbf\xb0\xd0f\xbc\xb7\xe7\x8c\x11\x9f6l\xa4O\xd9\xa0o\x85\xb7\xea\xaaG&\x95\xb8)[\x022"\xd4\x84E\xedB}\xfa\x8c;\xee\'^s\xda=\x07~Rl\xc9\xfc\xbe\xc02m\xc6\xd3\xe2y0\xa0\xba\x9e\xda+\xc5\x05u\xd2 f\x19>i\x92\x9e5{e\xd9G\xb1\xfa\xc4;yz\xf6\xdb\xaf\xe9\xa5\xa9N)+\xb5\x19S\x96D\x1a\x15\x9b\xa3\xf4\xae?.r\xc7g\xf9\xe83\xab\xc6\xbag\x1d;\xac\x1d?*\xf50\xffH\xfd\xc7\x9f3 V\xfc?<\xafZ#\xe6\xca+\x05\xab\xe5\xb4_\xa1\xf8\xfbe\x89\xfe\xee\xd7Fn\xedh#=\xba\xaa\xa9"\xb0@\x1a.x\xf4\xc0\xb3S\x8dzo\xa7\x84\xe5_\x97\xf5\x8e\x9b\xda\x9e\xfe/]z\xbfM\x9b&\x9a\x0ck\xc4F\xd9\xb2\xb5[*\x0b\x1a,)\x8dQ\x82>\xccO}\xfa\xd4f\xfd@\xae\xc6.\x10\xc7p\xa8D\xde>\xab\xfa\xdbfH\xc4\x9d\xd9r\xfdO\xddj\xf1\xb7\x7fp\x0f6oQ\x8bM\x03\xday6L?\x1c:i\xd8\xefo5n\x07\xfdL;K\x02\xf4\xcb\xbd?\xd4\xcb\x82\xca%\xd4\xcb"\xd3\x1f\x16\xc9\xa1\x1b\x0em\xda\xddjA\x7f\xf4a~\xea\xd3g\xd6\xdd\x87n\xbbg\xbb8\xeb\xebT_\xe27\xf2b\xe6\xeftt\xce&\x9d\x19{B\'g<\xa9\xbf\xd8\x9ei\x0c;|\x8c\xd2q\xb7\x8c\xc4z\x7fc\xc7\xed\x9b\xfaW{\x0e\xeb\xbe\xe7\xben\xfc\xa6.W7/\xfeL\x17\x94T\xea\xf8\xaa9\xc6?j\x17j\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7\x8f\xd7\xa4nuc\xd4SR\xba\xb4P{\xb6\x0f\xea\xf2%.I\xbbsO\xe5\xde\xbb$\x87NV\x18/\x9c(2\x86\x9c\x17\x8d\xe3\xed\x93\x8d\xdeK\xd3\x0c]sY\x7f\xd1Y.\x1fd\r\xb8"\xfb\xcbu[O\x87\xeez\xee\x9c\x9e\xe3\x989\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7\xcd\'\x9eU\xb2!\xa6S\xcc\xafOs\x87\x1b\xbdz\xe6\xf4"\x8b\xad\'D\xcf\x9f\x12";\x13\xf3\xa4\xe5J\x95\xdb1*S\xefkp\xe8\x1b\xa6h\x9d:\xf0_\x97e\xd3Jy\xf3\xca2\x89\xb3%Ibq\xbe.\xbe\xff\xbe\xc6\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe9\xb3{\xf5\x02#\xee@\xa9\xb6G\xf9\xba&}\xf5\x95^\xf0\x91I\x97Dm3N\x07\x8f5v\x14\r\xe9\x8fg\xfa\xba\x83\xbd\xab\xd5\x98\xcbO\xaa\xf6\xa8\x06sEG\x9d\n\xdbw\xce\xe2nj\xb5<\xed\xda\xac\xcb\xee~&\xf8\x1f\x7f\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7\xcf\xb6\xa8P\xcb\xfb^\xc1\x96\xa6\xbb\xafK\xb8\xf7\xa09.t\x94\xb5%\xdbd\xbdRt\xcc\xed\xa8HpO\xac|G\xc2\xbe+\x92\x83\xfb\x9c\xae\x98\xff\xbc\xac\xbe\x1f\xff\xc8|g\xba\x9f\\|\xb3C\x1c\xbf9\xa6\xc8\x17\xfe\xc7\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe9S\xd3\xfdKON\xe3\x04\xcf\xa3U\xa2\x13\x8e\xbf\xe2z\x904\xddU\x9e;\xc1Z1s\xac\xb5\xeej\x9e\xbe\xdc\xb3N\xef\x9c\x98\xacc\x12R\xb5\xeeX.\x96\xe4!\t_\xbdY\xce\xd4G\x8e\xe4\x97|\xe1\x7f\xfc\x89\x7f\xd8/\xfa\xa3\x0f\xf3S\x9f>cb\x1a\\\x83i\x1f\xaa\xc1\xfd;\xe4j\xcf)Yq\xa7E\xcfKr\xeb\xe3]>\xd6\x86l\x1f\xeb\xdfV=R\xc9G\xbb\xcc\xe9\xf5\xe7U|\xe8_\xe5\xf3\xdcDwI\xd69\x05\x1f\xc8/\xf9\xc2\xff\xf8\x13\xff\xb0_\xf4G\x1f\xe6\xa7>}\x02\xfb\x93,\xeep\xb7\xc4\x04O\xd6\xcb\xda\xafi\xfb\x99kz\xd6\xd4g\xf4\x8d\x96\xed\xda\xa72\xc5\x93\xdaf\xf7\xcc\x7f5U\x9e\xbd\xb9U\xb6\xf5\xbe!\xae5-f\xf8\x03\x1f\xc8/\xf9\xc2\xff\xf8\x13\xff\xb0_\xf4G\x1f\xe6\xa7>}^k\x1f\xad\xe7\x1ct\x8a#\xe3\x19\xbd\xcd\x18\xaf3\xad\x1d\xd2\xe7zW\xfeyd\xa2\xd5\x15\xeek\x9d\xfd\xd2V\xbd\xb7\xf7\x13\xb9Z}\xca\xec\xb1\xceS\xf0\r\xfe\xc0\x07\xf2K\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9f\xd8u[\x9a\xf3}#\xf4\x9a\x03\x7f\xd1\x85\xd5E\xfaBT\xb1\xce.\x9d$\xea\xda|\xc9\xfdv\x93Z\xdf\xd7\xa9\x8e\r\xd54\xd5\x1e\x1e/\xf0\x13\xbe\xc1\x1f\xf8@~\xc9\x17\xfe\xc7\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe9\xb30\xbfM\xdf\xcb\xd9\xa8\x13\xfe\xad\xf5\x03\xef]z\xf8\x88\x92|\x9f\x18Y\xb7|\x97\xea\x1b\xaaQc\xe2_uU\x05L\x1e\xe13\xfc\x84o\xf0\x07>\x90_\xf2\x85\xff\xf1\'\xfea\xbf\xe8\x8f>\xccO}\xfa\xc4\xa4\xdb\x9a\x83\xed\xf3TM\xfdK\x12\xe7|K\xf9\xb7^S\x81\xd7{\xcc\x1b\x92\x16*S\xe1h\x97e\x85\xaf\xc0\x7f\xf8\x0c?\xe1\x1b\xfc\x81\x0f\xe4\x97|\xe1\x7f\xfc\x89\x7f\xd8/\xfa\xa3\x0f\xf3S\x7f\x84\x07\xd9\xe7\xcd\xe9\xaa\xd3|\xe2\xeb\x1c\xd5\x1ewPU?\xd1\xd0\xd4\xd6=\xd9u\xe4\xef\xab\x9b\xee\xef\xff\xa9p_\xe0?|\x86\x9f\xf0\r\xfe\xc0\x07\xf2K\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9fQE\xf3\x9b\x8b\x93?VS\x8d\x0fTY\xe1\xa7j\xdc\xa4\x8d\xaao\xc2%\x1d\x11V\xa1\xb8_\xdc\x17\xf8\x0f\x9f\xe1\'|\x83?\xf0\x81\xfc\x92/\xfc\x8f?\xf1\x0f\xfbE\x7f\xf4a~\xea\xd3\xa73\xccOf\xcd8\xa4R\x13\x07\x95\xbfs\x8f*\xfb\xbcJ\xb7\x96\xd4*\xee#\xf7\x8b\xfb\x02\xff\xe13\xfc\x84o\xf0\x07>\x90_\xf2\x85\xff\xf1\'\xfea\xbf\xe8\x8f>\xccO}\xfa\xbc\x98dk\x1e\xfc2BB\xd7?/\xd1\x01)r4/\xa3\x91\xfb\xcb}\xe4~q_\xe0?|\x86\x9f\xf0\r\xfe\xc0\x07\xf2K\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9f~K\xb8\x14\x0cl\x91\xe8\xae\xb5RT\xf9c3\xf7\x9d\xfb\xcb}\xe4~q_\xe0?|\x86\x9f\xf0\r\xfe\xc0\x07\xf2K\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9f\xf6\xe6\\\xf7\xe1\x8cj\xf5\xe7[\x95\xc2\xfb\x81\xfb\xce\xfd\xe5>r\xbf\xb8/\xf0\x1f>\xc3O\xf8\x06\x7f\xe0\x03\xf9%_\xf8\x1f\x7f\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7On\x94\x97,ypt\xe4}\xc2\xfb\x81\xfb\xce\xfd\xe5>r\xbf\xb8/\xf0\x1f>\xc3O\xf8\x06\x7f\xe0\x03\xf9%_\xf8\x1f\x7f\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7\xcf\xfe\xcd\xb7\x85\xf7\x0f\xef\x13\xde\x0f\xdcw\xee/\xf7\x91\xfb\xc5}\x81\xff\xf0\x19~\xc27\xf8\x03\x1f\xc8/\xf9\xc2\xff\xf8\x13\xff\xb0_\xf4G\x1f\xe6\xa7>}\xfe\x07PK\x03\x04\x14\x00\x00\x00\x08\x00\x00\x00!\x00[\x032\xd3\r\x07\x00\x00D\n\x00\x00\x1b\x00\x14\x00ep_coupling_uncertainty.npy\x01\x00\x10\x00D\n\x00\x00\x00\x00\x00\x00\r\x07\x00\x00\x00\x00\x00\x00\x9d\x96\xfdW\xd6\xf5\x19\xc7\x11-\x1e\xc2|\x98\x89\xa2\x12%\x86\x80\x0fx#\xf8\x90\\\xef[\x0b\x83\x14|B]Nd\xa688c\xa17\xceNN\xcf\xd4\x80\xd6\xd0f\xa2-\x150R\xe7\xd1\x05\x921B%\x95\x05"\xd0YtD\xc1\x166C\x9d\xe24<\x9a\xce\x07t\xbc\xf8\x13\xf6\xfd\xed\xbe\x7f\xb8\xae\xeb\xbc\xaf\xf7\xf5z\x7fr\xe3\xe7\xc6\xcd|\xad\x9b\xdb*\xb7\xdf\x05-M\xceX\xe2\n\x9a\x18\x104i\xd9\xd8\xa0\x11\x01A\xcb\xd2]+]\x8b\xdfHJw-M\xe6\xff\xa9\x8b\xd32\x92;\xff\xcfHY\xbc<\xb9\xf3\xf7pG\xc4\x88\x00GD\xf0\x88\x80\xb5\x01\xff\xe7\xe7\xed\xd6\xf9\r\x8aXd_z\x8d\x91\x86\xf9hc\xcdc\xfbx\xea\xbf,\x7f\xa6\x97\x1eo\xab\xb2\xa8_\xcfW\xe2\x9fR\x14\xb2\xfec\x15\xcf\x8a\xd1\xe6\x8e4\x1d{c\xa7\xca\xcf\x8fQlB\x9e\xaeM\xb9\xa6\xdd\xe1\x0fUQ\xdc\xa2\x19\xe9I\xfa\xe4\xc8a\xc5\xe7&\xe8\xd4\x8d\xe7ug\xae\xbfn%\x84\x8b\xfa\xf4y{\xeb\xcf\xd4\xec\xd9[w\xba\x97\xe8\xca\xf4\x03\xeaXUkc<\xbc\xb5\xea\xc2\x02\xdd8\xf7\x93\xbd:$I\xd5\x9f\x96\xd9\x07}\xae\xdb\xe5/N\xa8\xf6\x8bo\xb5\xe2X\x9c\xfe{\xcf\xa1\xd2\xad\xfe\xce\xfa[\xfd\x9c\x95\x89\xcd\xd6\x12\xf8\xb5&\x0c\\\xa3;\x07CT\x94y^OmI\x10\xf3S\x9f>\x1e\xf1\xe5\xf6\xe2\xea\xfd\xd6\xe0Wg}f$)\xad\xff y\x17>2\xaf\xf6K\n\x7f|\xdc.\xd6\xf6R\xf5\xed&\xfb\xd5\xcc\x8f\x94\x9a\x16\xa7\xbai\x8d\x96W2P\x85\xab\x9f\x95\xabj\x82|R\xba9\x93\xc7]S\xe0\x08\x93\xfd}\xb0v\xdf?\xa3\xf4\xc3n]\xfa0?\xf5\xe9\xf3\xba\xa3\xcd\xa6D\xfe\xd5j\x8f\xce\xd2[\x19\xad6\xb8\xd0G\x91W\xd7\xd9\x0b\xcf\x15\xd9\xf5\xa7\x9b4\xa2\xb1\xbfb\x9a\xf2\xe4[\xd5[I\xd5\x97\x94\xfa]\xb1\xf6\x846\x98\xfb\xe2\x7f\xdb\xa9\rN\xcds\xe4\xd8W\xb9\xa3\xe4{b\xa0\xea\x9ab\xf5}\xea\xb9.\xfd\xd1\x87\xf9\xa9O\x9f\x1f\x0eN\xd2\xef\x9b\xe3u7\xa4\xcc~1\xad\xd5\x8ed\x0fU\x9f\xb5\x0b\xf4\xfc\x1f\x0bu\xe2\x97\xdbt\xf8\xb8\xa7\xf3^n\x8d\x02\x83G9\xb3\xa3\xd3\xb4&\xffK\xdd/\xf9@\xf3~\xbe\xc3\xfe\xf6r\xbeFFg*/\xfb]M\x9fzV3\xc7\xd7\x88\xfd\xa2?\xfa0?\xf5\xe9\xe3Wr\xda\xb6\xc7}d/\xe5\xdd\xb5\xaa\r{\x14<t\xb4\x8e\x1e\xe8\xa9\xcbKo\xdb\xbc\xf8\xcb:\x9bR\xa1\x9bw{;?\xc9\xa8V\xe0\nw\xe7n\xf7\xcftqr\x826]\xf9\x8f\xd5\x9c\xfc\\\x0bC\x8fk\xbc\xc2\x95\xb3s\xb9\xf0\x0f\xfbE\x7f\xf4a~\xea\xd3g\xd2\xaer\x0b{\xa2]mI\x91:\xfa\xcc[r\x0c\xabT\x0f["\x8f-C\xf4\xe8\xcd\x9dv\xb6|\x8f\xfc#O\xea\xc9\x97*U\x19\x91\xa5i~\x01\n\xcc\xf7S\xf5\xd4\xc1j,\xda\xab\xe4A\xe1\x8a-\xe8\xdb\xe5O\xfc\xc3~\xd1\x1f}\x98\x9f\xfa\xf4\xf1\xdc\xb7[y\x97\'\xaa\xa5>L\xaf\xd5gk\xf4\xe9h=\x9b\xe9\xe9\xf4\xae)\xd4\x96\xdf\x1c\x91\xeff\x1f\x85\xb6\xf5TJ\xfa@\x95G\xf6W\xc8\xd56k\xbeuA\x0f\x83\xbeW\xc3\x8f\xf9:\xb7#K\xf8\x1f\x7f\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7O\xf9\xdcQ\xf6U\xc1\x9f\xed\xfa\xf4\xee\n8\xdef\xbe\xd3\x83-n\xd0P\xbb\x12q\xdd\x1em\xcf\xb2\x8ek\xff\xb0\r\xafTXFK\xaa\x1e\xac\xdfo\xb9\x03\xb6Z\xe9\xcd"\xfbv\xd3;\xca\xcf\xdcn\xdc\x17\xfe\xc7\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe93\xee\xe4"=t\x14X\xce\xfdg4\xf9\xc8>s\xa5\x9f\xb4\x82\xdd\xd9\xb62\xf7F\x94.\x04\xabt\xce\xd3z|\xbeT\xee\xc5\xfb\xf4\xdd\xeaVK\x9c\xdf]mn\xff\xb4\xd3\xbdzu\xdd/\xf7\x85\xff\xf1\'\xfe\xe9\xdao\xa7\xfe\xe8\xc3\xfc\xd4\xa7O\xc6~\x87\xc6\xbeSh\x05K\xfc\xd4\x1e\x1a\xa6\xbc\x01O\xe8\x90W\x87]\xba\x93d\x17\xc3\x97\xd9S\x05\x99v\xe6X\xaa\xf9O\xd8h?\xe5xZaC\x85\xb5\x9bW\x17\x1f\xb8_\xee\x0b\xff\xe3O\xfc\xc3~\xd1\x1f}\x98\x9f\xfa\xf4i~q\x81\xad\x9cv\xd4\x96FVZ\xd2\xec\xc9:\xdb\xb4\xd9\xd6\x8d|Y\xae\xafg\xe8\x95\xd6u6\xcc\xfd]\x1b\xeb\xddOU\x99\x9e\xba\xf3\xdc\x1c\xbd~\xe4\x90\xc1\x1f\xf8\xc0\xfdr_\xf8\x1f\x7f\xe2\x1f\xf6\x8b\xfe\xe8\xc3\xfc\xd4\xa7\xcf\x01G\xa0\x12\xda{\xaa\xf1\xeep\xa5\x1e\x1c\xa0n\x7f\xd9d\x97&\xaf\xb7moG\xdbr\x9bb\x8bn\x0cS\xedos\xb4\xf1}?M\x18y\xda\xe0\x1b\xfc\x81\x0f\xdc/\xf7\x85\xff\xf1\'\xfea\xbf\xe8\x8f>\xccO}\xfa\x84\xf6}\xdfro{\xc8\xf7\x81\x87f\xd7\xf4\xd3\xa2q\xddT\xde{\xb6\xcd\xe9\xbe\xd1\xce\x0c\xce\xb4\xe4\xd6\xe968q\xadE\xd7\xa4\x19\xfc\x84o\xf0\x07>p\xbf\xdc\x17\xfe\xc7\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe93\xac\xdaK\x81Y\xd7\xa2\xbc\xd6\x0c\xd4\xe8e\x0f\xed\xc7\xd4(\xdb\xe6&\xdb\x133\xcbfE\xc4\xd8\xbd\x8aX\xdb\xbbc\x97\xc1g\xf8\t\xdf\xe0\x0f|\xe0~\xb9/\xfc\x8f?\xf1\x0f\xfbE\x7f\xf4a~\xea\xd3\'x\xe1\x10+?\x95n\xe3\x17_5\xf7\xee\xf16\xe0\xfcg\x16\xfb\x8d\xbf\xbd\xfa\xe4$k\x08\x1a`\x8f\x0e\xed2\xf8\x0f\x9f\xe1\'|\x83?\xf0\x81\xfb\xe5\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9f?\xf8\xee\xb5\xfa\x1f\x16\x9a\xa3\xac\xc4\x16j\x8d\rw\x99\xcd\x9d7\xca6\xe4O\xb0\xaa\x1e\'\x8c|\x81\xff\xf0\x19~\xc27\xf8\x03\x1f\xb8_\xee\x0b\xff\xe3O\xfc\xc3~\xd1\x1f}\x98\x9f\xfa\xf4y\xef\xf3\xb5V\x16\xe6mu\xf5\x1dQc#\xe2lbX\xb8\xf5/\x0b\xd4P\x1f\x7f#\xbf\xc8\x17\xf8\x0f\x9f\xe1\'|\x83?\xf0\x81\xfb\xe5\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9O\x9fb\xbdi\xeb\x1b\x9d\xf6\xe1\xa9\x15\xd6\xd0\x98e\xc7zT\xd9\xcd\xbaP#\x1f\xc9/\xf2\xa5\x8b\xff\x9d|\x86\x9f\xf0\r\xfe\xc0\x07\xee\x97\xfb\xc2\xff\xf8\x13\xff\xb0_\xf4G\x1f\xe6\xa7>}\x0eG|\x13u\xea\xbdO-\xf1A\x91\xddk\xe9c\xa3\xe4e\xe4/\xf9H~\x91/\xf0\x1f>\xc3O\xf8\x06\x7f\xe0\x03\xf7\xcb}\xe1\x7f\xfc\x89\x7f\xd8/\xfa\xa3\x0f\xf3S\x9f>\xd1\xe7\xdcT\xef\xf2\xb5\x90\xf8X\xbbX1\xd1\xc8w\xf2\x97|$\xbf\xc8\x17\xf8\x0f\x9f\xe1\'|\x83?\xf0\x81\xfb\xe5\xbe\xf0?\xfe\xc4?\xec\x17\xfd\xd1\x87\xf9\xa9\xdf\x95\xa7C\x8eZ^\xdf\x18\x8b\x99\xef\xb2\xae\xf7Cg\xbe\x93\xbf\xe4#\xf9E\xbe\xc0\x7f\xf8\x0c?\xe1\x1b\xfc\x81\x0f\xdc/\xf7\x85\xff\xf1\'\xfea\xbf\xe8\x8f>\xccO}\xfa\x94\xe6o\xb5\x86\xaa]\xc6\xfb\x84\xf7\x03\xf9N\xfe\x92\x8f\xe4\x17\xf9\x02\xff\xe13\xfc\x84o\xf0\x07>p\xbf\xdc\x17\xfe\xc7\x9f\xf8\x87\xfd\xa2?\xfa0?\xf5\xe933\xe6\xaa\xf1\xfe\xe1}\xc2\xfb\x81|\'\x7f\xc9G\xf2\x8b|\x81\xff\xf0\x19~\xc27\xf8\x03\x1f\xb8_\xee\x0b\xff\xe3O\xfc\xc3~\xd1\x1f}\x98\x9f\xfa\xf4\xf9\x1fPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xac\x81\x10\x04f\x00\x00\x00D\n\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00adjacency.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x7f\xc4\xe3KJ\x00\x00\x00\x99\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xa5\x00\x00\x00vp_shift_observed.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x98\x85\xe3\x17\x7f\x00\x00\x00\xe4\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x016\x01\x00\x00vp_shift_value.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00cl:@~\x00\x00\x00\xe4\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xf9\x01\x00\x00vp_shift_uncertainty.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00;X(\xe1V\x00\x00\x00\x10\x02\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xc1\x02\x00\x00vp_shift_nuc.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xf9\xb8)\x86O\x00\x00\x00\x99\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01Y\x03\x00\x00vp_splitting.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\x88\x15SD\x08\x01\x00\x00t\x02\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xea\x03\x00\x00vp_coupling_HH.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xb0\xd7\xc7\x12R\x00\x00\x00\xf1\x02\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x016\x05\x00\x00ep_coupling_observed.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00\xd2Hs2<\x07\x00\x00D\n\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd2\x05\x00\x00ep_coupling_value.npyPK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00\x00\x00!\x00[\x032\xd3\r\x07\x00\x00D\n\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01U\r\x00\x00ep_coupling_uncertainty.npyPK\x05\x06\x00\x00\x00\x00\n\x00\n\x00\x92\x02\x00\x00\xaf\x14\x00\x00\x00\x00'




def test_permute_multi_dtype_hard_graph():
    """
    Can we permute a graph with complex vert dtypes
    """

    fid = io.BytesIO(multi_dim_dtype_graph)
    g = tg.io.from_binary(fid)
    
        

